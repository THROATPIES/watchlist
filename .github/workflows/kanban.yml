name: Update Kanban Board

on:
  push:
    paths:
      - 'watchlist.md'
  workflow_dispatch:

jobs:
  update-kanban:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Debug File Content
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            const fs = require('fs');
            const content = fs.readFileSync('watchlist.md', 'utf8');
            console.log('File content:', content);
            
      - name: Create/Update Project Items
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            const fs = require('fs');
            const content = fs.readFileSync('watchlist.md', 'utf8');
            
            // Parse sections with fixed regex
            const watchSection = content.split('## ðŸ“º Watch')[1].split('## ðŸŽ¬ In Progress')[0].trim();
            const inProgressSection = content.split('## ðŸŽ¬ In Progress')[1].split('## âœ… Completed')[0].trim();
            const completedSection = content.split('## âœ… Completed')[1]?.trim() || '';
            
            console.log('Watch section:', watchSection);
            console.log('In Progress section:', inProgressSection);
            console.log('Completed section:', completedSection);
            
            // Extract items with fixed regex
            const watchItems = (watchSection.match(/- \[ \] (.*?)(?=\n|$)/g) || [])
              .map(item => item.replace('- [ ] ', '').trim());
            const inProgressItems = (inProgressSection.match(/- \[.\] (.*?)(?=\n|$)/g) || [])
              .map(item => item.replace(/- \[.\] /, '').trim());
            const completedItems = (completedSection.match(/- \[x\] (.*?)(?=\n|$)/g) || [])
              .map(item => item.replace('- [x] ', '').trim());
            
            console.log('Watch items:', watchItems);
            console.log('In Progress items:', inProgressItems);
            console.log('Completed items:', completedItems);

            const addToProject = async (title, status) => {
              console.log(`Attempting to add item: "${title}" with status: "${status}"`);
              // Escape special characters in the title
              const escapedTitle = title.replace(/"/g, '\\"');
              const mutation = `
                mutation {
                  createProjectV2Item(input: {
                    projectId: "PVT_kwHOCw13Q84Ay6MG"
                    title: "${escapedTitle}"
                    fieldValues: [
                      {
                        projectV2CustomFieldId: "PVTSSF_lAHOCw13Q84Ay6MGzgoySwo"
                        value: "${status}"
                      }
                    ]
                  }) {
                    projectV2Item {
                      id
                    }
                  }
                }
              `;
              
              try {
                const result = await github.graphql(mutation);
                console.log('Successfully added item:', title, 'with status:', status);
                console.log('Result:', JSON.stringify(result, null, 2));
              } catch (error) {
                console.error('Error adding item:', title);
                console.error('Error details:', JSON.stringify(error, null, 2));
                throw error;
              }
            };

            // Add items with error handling
            try {
              console.log('Starting to add watch items...');
              for (const item of watchItems) {
                await addToProject(item, "Todo");
              }
              
              console.log('Starting to add in-progress items...');
              for (const item of inProgressItems) {
                await addToProject(item, "In Progress");
              }
              
              console.log('Starting to add completed items...');
              for (const item of completedItems) {
                await addToProject(item, "Done");
              }
            } catch (error) {
              console.error('Failed during item creation:', error);
              throw error;
            }
