name: Update Kanban Board

on:
  push:
    paths:
      - 'watchlist.md'
  workflow_dispatch:

jobs:
  update-kanban:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Debug File Content
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            const fs = require('fs');
            const content = fs.readFileSync('watchlist.md', 'utf8');
            console.log('File content:', content);
            
      - name: Create/Update Project Items
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            const fs = require('fs');
            const content = fs.readFileSync('watchlist.md', 'utf8');
            
            // Parse sections
            const watchSection = content.split('## ðŸ“º Watch')[1].split('## ðŸŽ¬ In Progress')[0].trim();
            const inProgressSection = content.split('## ðŸŽ¬ In Progress')[1].split('## âœ… Completed')[0].trim();
            const completedSection = content.split('## âœ… Completed')[1]?.trim() || '';
            
            // Extract items with tags
            const extractTitleAndTag = (item) => {
              const match = item.match(/(.*?)\s*`(\w+)`$/);
              if (match) {
                return {
                  title: match[1].trim(),
                  tag: match[2]
                };
              }
              return {
                title: item,
                tag: null
              };
            };

            const watchItems = (watchSection.match(/- \[ \] (.*?)(?=\n|$)/g) || [])
              .map(item => {
                const cleanItem = item.replace('- [ ] ', '').trim();
                return extractTitleAndTag(cleanItem);
              });

            const inProgressItems = (inProgressSection.match(/- \[.\] (.*?)(?=\n|$)/g) || [])
              .map(item => {
                const cleanItem = item.replace(/- \[.\] /, '').trim();
                return extractTitleAndTag(cleanItem);
              });

            const completedItems = (completedSection.match(/- \[x\] (.*?)(?=\n|$)/g) || [])
              .map(item => {
                const cleanItem = item.replace('- [x] ', '').trim();
                return extractTitleAndTag(cleanItem);
              });

            // First, get the status field options
            const getStatusFieldOptions = async () => {
              const query = `
                query {
                  node(id: "PVT_kwHOCw13Q84Ay6MG") {
                    ... on ProjectV2 {
                      field(name: "Status") {
                        ... on ProjectV2SingleSelectField {
                          options {
                            id
                            name
                          }
                        }
                      }
                    }
                  }
                }
              `;
              
              const result = await github.graphql(query);
              return result.node.field.options;
            };

            const statusOptions = await getStatusFieldOptions();
            const getOptionId = (name) => {
              const option = statusOptions.find(opt => opt.name === name);
              return option ? option.id : null;
            };
            
            const addToProject = async (itemData, status) => {
              console.log(`Attempting to add item: "${itemData.title}" with status: "${status}"`);
              const escapedTitle = itemData.title.replace(/"/g, '\\"');
              const description = itemData.tag ? `Type: ${itemData.tag}` : '';
              const escapedDescription = description.replace(/"/g, '\\"');
              const statusOptionId = getOptionId(status);
              
              if (!statusOptionId) {
                throw new Error(`Status option not found: ${status}`);
              }
              
              // Create the item with description
              const createMutation = `
                mutation {
                  addProjectV2DraftIssue(input: {
                    projectId: "PVT_kwHOCw13Q84Ay6MG"
                    title: "${escapedTitle}"
                    body: "${escapedDescription}"
                  }) {
                    projectItem {
                      id
                    }
                  }
                }
              `;
              
              try {
                const result = await github.graphql(createMutation);
                const itemId = result.addProjectV2DraftIssue.projectItem.id;
                console.log('Created item:', itemId);
                
                // Update its status
                const updateMutation = `
                  mutation {
                    updateProjectV2ItemFieldValue(input: {
                      projectId: "PVT_kwHOCw13Q84Ay6MG"
                      itemId: "${itemId}"
                      fieldId: "PVTSSF_lAHOCw13Q84Ay6MGzgoySwo"
                      value: { singleSelectOptionId: "${statusOptionId}" }
                    }) {
                      projectV2Item {
                        id
                      }
                    }
                  }
                `;
                
                await github.graphql(updateMutation);
                console.log('Successfully updated status for:', itemData.title);
                
              } catch (error) {
                console.error('Error processing item:', itemData.title);
                console.error('Error details:', JSON.stringify(error, null, 2));
                throw error;
              }
            };

            // Add items with error handling
            try {
              console.log('Starting to add watch items...');
              for (const item of watchItems) {
                await addToProject(item, "Todo");
              }
              
              console.log('Starting to add in-progress items...');
              for (const item of inProgressItems) {
                await addToProject(item, "In Progress");
              }
              
              console.log('Starting to add completed items...');
              for (const item of completedItems) {
                await addToProject(item, "Done");
              }
            } catch (error) {
              console.error('Failed during item creation:', error);
              throw error;
            }
