name: Update Kanban Board

on:
  push:
    paths:
      - 'watchlist.md'
  workflow_dispatch:

jobs:
  update-kanban:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Create/Update Project Items
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            const fs = require('fs');
            const content = fs.readFileSync('watchlist.md', 'utf8');
            
            // Parse sections
            const watchSection = content.match(/## ðŸ“º Watch\n\n([\s\S]*?)(?=\n## |$)/)?.[1] || '';
            const inProgressSection = content.match(/## ðŸŽ¬ In Progress\n\n([\s\S]*?)(?=\n## |$)/)?.[1] || '';
            const completedSection = content.match(/## âœ… Completed\n\n([\s\S]*?)(?=\n## |$)/)?.[1] || '';
            
            // Extract items
            const watchItems = watchSection.match(/- \[ \] (.*)/g)?.map(item => item.replace('- [ ] ', '')) || [];
            const inProgressItems = inProgressSection.match(/- \[.\] (.*)/g)?.map(item => item.replace('- [.] ', '')) || [];
            const completedItems = completedSection.match(/- \[x\] (.*)/g)?.map(item => item.replace('- [x] ', '')) || [];

            // GraphQL mutation to add items to project
            const addToProject = async (title, status) => {
              const mutation = `
                mutation {
                  createProjectV2Item(input: {
                    projectId: "1"
                    title: "${title}"
                    fieldValues: [
                      {
                        projectV2CustomFieldId: "PVTSSF_lAHOCw13Q84Ay6MGzgoySwo"
                        value: "${status}"
                      }
                    ]
                  }) {
                    projectV2Item {
                      id
                    }
                  }
                }
              `;
              
              await github.graphql(mutation);
            };

            // Add all items to project
            for (const item of watchItems) {
              await addToProject(item, "Watch");
            }
            
            for (const item of inProgressItems) {
              await addToProject(item, "In Progress");
            }
            
            for (const item of completedItems) {
              await addToProject(item, "Completed");
            }
